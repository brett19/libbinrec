diff -r 6fbc109affc2 benchmarks/dhrystone/dhry.h
--- a/benchmarks/dhrystone/dhry.h	Thu Oct 13 02:04:35 2016 +0900
+++ b/benchmarks/dhrystone/dhry.h	Fri Oct 21 20:40:29 2016 +0900
@@ -4,11 +4,12 @@
  *                   "DHRYSTONE" Benchmark Program
  *                   -----------------------------
  *                                                                            
- *  Version:    C, Version 2.1
+ *  Version:    C, Version 2.1-AC
  *                                                                            
  *  File:       dhry.h (part 1 of 3)
  *
  *  Date:       May 25, 1988
+ *              (Version 2.1-AC: October 16, 2016)
  *
  *  Author:     Reinhold P. Weicker
  *                      Siemens AG, AUT E 51
@@ -127,6 +128,84 @@
  *              non-executed "else" part was added to the "if" statement in
  *              Func_3, and a non-executed "else" part removed from Proc_3.
  *
+ * Changes for version 2.1-AC (2016-10-13, by Andrew Church):
+ *              Initialization of global data has been moved to a separate
+ *              Init() function, which is called from main().  Init() also
+ *              includes static-linkage Rec_Type buffers for the Ptr_Glob
+ *              and Next_Ptr_Glob variables rather than allocating those
+ *              buffers by calling malloc(); this removes the only use of
+ *              dynamically allocated memory in the code.
+ *
+ *              If the preprocessor symbol BENCHMARK_ONLY is defined, all
+ *              code not part of the benchmark proper (printf() output,
+ *              time measurement, and so on) is omitted from the compiled
+ *              code.  In this case, the main() function is replaced by a
+ *              function Main() (note capitalization) which accepts a
+ *              single parameter, the number of iterations for which to run
+ *              the benchmark, and returns a nonzero value on successful
+ *              completion or zero if an error was detected in the
+ *              computation results.  In this usage, the caller must call
+ *              Init() before Main().
+ *
+ *              If the preprocessor symbol DHRY_PREFIX is defined, all
+ *              globally-visible identifiers will have this prepended to
+ *              their names.  For example, if DHRY_PREFIX is "dhry_"
+ *              (without quotes), then identifiers will be renamed to
+ *              dhry_Proc_1(), dhry_Ptr_Glob, and so on.  In this case,
+ *              the entry points will also receive the given prefix
+ *              (dhry_Init() and dhry_Main() in this example).
+ *
+ *              The #include of <stdio.h> for strcpy() and strcmp() has
+ *              been changed to the correct <string.h>.  <stdio.h> is
+ *              still included (for printf() and scanf()) if BENCHMARK_ONLY
+ *              is not defined.
+ *
+ *              The times() and time() functions are now declared by
+ *              including the appropriate system header (<sys/time.h> and
+ *              <time.h>, respectively) rather than writing the declaration
+ *              inline, since the existing inline declarations were not
+ *              correct.  For times(), if HZ is not defined at compilation
+ *              time, its value is obtained by calling the POSIX sysconf()
+ *              function for the CLK_TCK parameter.
+ *
+ *              The comment for Proc_2() now correctly indicates the
+ *              expected output value (5).
+ *
+ *              The version number output by the program (if BENCHMARK_ONLY
+ *              is not defined) has been changed to "2.1-AC" to reflect the
+ *              above changes.
+ *
+ *              Note that none[*] of these changes affect code within the
+ *              measurement loop.  The only impact on timing is that in a
+ *              BENCHMARK_ONLY compilation, assuming the caller begins
+ *              timing immediately before calling the Main function and
+ *              ends timing as soon as that function returns, the act of
+ *              calling Main() itself (including function prologue and
+ *              epilogue) and the test for correct results are included in
+ *              the total time.  On processors used in current-generation
+ *              personal computers and similar devices, this additional
+ *              time is expected to be well below the threshold of noise
+ *              from system interrupts and other external interference, so
+ *              times measured in the manner described above should be
+ *              comparable to previously measured Dhrystone 2.1 times.
+ *
+ *              [*] The change from <stdio.h> to <string.h> could, in
+ *                  theory, affect the precise sequence of instructions
+ *                  used to call strcpy() and strcmp().  The conditions for
+ *                  this to occur are that <stdio.h> does not include
+ *                  <string.h> or otherwise provide equivalent declarations
+ *                  of strcpy() and strcmp(), and that the CPU architecture
+ *                  ABI mandates different instruction sequences for
+ *                  calling functions with and without prototypes.  I am
+ *                  not aware of any environments in which both conditions
+ *                  hold, though the latter condition is true on PowerPC
+ *                  processors under the System V ABI: callers to an
+ *                  unprototyped or varargs function must set or clear CR
+ *                  bit 6 to indicate whether any floating-point arguments
+ *                  are passed to the function, so the presence of
+ *                  prototypes allows the compiler to omit a "crclr"
+ *                  instruction on each strcpy() and strcmp() call.
+ *
  ***************************************************************************
  *
  * Defines:     The following "Defines" are possible:
@@ -167,6 +246,23 @@
  *                      time in 1/HZ seconds, with HZ = 60 for most systems.
  *                      CHECK YOUR SYSTEM DESCRIPTION BEFORE YOU JUST APPLY
  *                      A VALUE.
+ *                      If your system supports the "sysconf" function,
+ *                      which is part of the POSIX standard, you can leave
+ *                      this undefined, and the program will detect the
+ *                      proper value at runtime.
+ *              -DBENCHMARK_ONLY
+ *                      Define to export "Init" and "Main" functions with
+ *                      which the benchmark can be run from an external
+ *                      controlling program.  See notes under History for
+ *                      usage and caveats.
+ *              -DDHRY_PREFIX=prefix
+ *                      Define to prepend "prefix" to all globally visible
+ *                      symbols.  For example, with "-DDHRY_PREFIX=dhry_",
+ *                      the functions will be named "dhry_Func_1",
+ *                      "dhry_Func_2", and so on.  Useful in combination
+ *                      with -DBENCHMARK_ONLY, especially if linking several
+ *                      copies of Dhrystone built with different compilers
+ *                      or compiler options into the same executable file.
  *
  ***************************************************************************
  *
@@ -347,6 +443,8 @@
 
 /* Compiler and system dependent definitions: */
 
+#ifndef BENCHMARK_ONLY
+
 #ifndef TIME
 #define TIMES
 #endif
@@ -362,6 +460,8 @@
 #define Mic_secs_Per_Second     1000000.0
                 /* Berkeley UNIX C returns process times in seconds/HZ */
 
+#endif  /* BENCHMARK_ONLY */
+
 #ifdef  NOSTRUCTASSIGN
 #define structassign(d, s)      memcpy(&(d), &(s), sizeof(d))
 #else
@@ -383,8 +483,13 @@
 
 /* General definitions: */
 
+#include <string.h>
+                /* for strcpy, strcmp */
+
+#ifndef BENCHMARK_ONLY
 #include <stdio.h>
-                /* for strcpy, strcmp */
+                /* for printf, scanf */
+#endif
 
 #define Null 0 
                 /* Value of a Null pointer */
@@ -420,4 +525,42 @@
           } variant;
       } Rec_Type, *Rec_Pointer;
 
+#ifdef DHRY_PREFIX
 
+#define PASTE2(prefix,name)  prefix ## name
+#define PASTE(prefix,name)   PASTE2(prefix, name)
+
+#define Proc_1  PASTE(DHRY_PREFIX, Proc_1)
+#define Proc_2  PASTE(DHRY_PREFIX, Proc_2)
+#define Proc_3  PASTE(DHRY_PREFIX, Proc_3)
+#define Proc_4  PASTE(DHRY_PREFIX, Proc_4)
+#define Proc_5  PASTE(DHRY_PREFIX, Proc_5)
+#define Proc_6  PASTE(DHRY_PREFIX, Proc_6)
+#define Proc_7  PASTE(DHRY_PREFIX, Proc_7)
+#define Proc_8  PASTE(DHRY_PREFIX, Proc_8)
+#define Func_1  PASTE(DHRY_PREFIX, Func_1)
+#define Func_2  PASTE(DHRY_PREFIX, Func_2)
+#define Func_3  PASTE(DHRY_PREFIX, Func_3)
+#define Init    PASTE(DHRY_PREFIX, Init)
+#define Main    PASTE(DHRY_PREFIX, Main)
+
+#define Ptr_Glob        PASTE(DHRY_PREFIX, Ptr_Glob)
+#define Next_Ptr_Glob   PASTE(DHRY_PREFIX, Next_Ptr_Glob)
+#define Int_Glob        PASTE(DHRY_PREFIX, Int_Glob)
+#define Bool_Glob       PASTE(DHRY_PREFIX, Bool_Glob)
+#define Ch_1_Glob       PASTE(DHRY_PREFIX, Ch_1_Glob)
+#define Ch_2_Glob       PASTE(DHRY_PREFIX, Ch_2_Glob)
+#define Arr_1_Glob      PASTE(DHRY_PREFIX, Arr_1_Glob)
+#define Arr_2_Glob      PASTE(DHRY_PREFIX, Arr_2_Glob)
+
+#endif  /* DHRY_PREFIX */
+
+#ifdef BENCHMARK_ONLY
+
+extern void Init(void);
+                /* Global data initialization procedure */
+
+extern int Main(int Number_Of_Runs);
+                /* Benchmark entry point */
+
+#endif
diff -r 6fbc109affc2 benchmarks/dhrystone/dhry_1.c
--- a/benchmarks/dhrystone/dhry_1.c	Thu Oct 13 02:04:35 2016 +0900
+++ b/benchmarks/dhrystone/dhry_1.c	Fri Oct 21 20:40:29 2016 +0900
@@ -4,11 +4,12 @@
  *                   "DHRYSTONE" Benchmark Program
  *                   -----------------------------
  *                                                                            
- *  Version:    C, Version 2.1
+ *  Version:    C, Version 2.1-AC
  *                                                                            
  *  File:       dhry_1.c (part 2 of 3)
  *
  *  Date:       May 25, 1988
+ *              (Version 2.1-AC: October 16, 2016)
  *
  *  Author:     Reinhold P. Weicker
  *
@@ -28,15 +29,19 @@
 int             Arr_1_Glob [50];
 int             Arr_2_Glob [50] [50];
 
-extern char     *malloc ();
 Enumeration     Func_1 ();
   /* forward declaration necessary since Enumeration may not simply be int */
 
 #ifndef REG
-        Boolean Reg = false;
 #define REG
         /* REG becomes defined as empty */
         /* i.e. no register variables   */
+#endif
+
+#ifndef BENCHMARK_ONLY
+
+#ifndef REG
+        Boolean Reg = false;
 #else
         Boolean Reg = true;
 #endif
@@ -44,15 +49,17 @@
 /* variables for time measurement: */
 
 #ifdef TIMES
+#include <sys/time.h>
 struct tms      time_info;
-extern  int     times ();
-                /* see library function "times" */
 #define Too_Small_Time 120
                 /* Measurements should last at least about 2 seconds */
+#ifndef HZ
+#include <unistd.h>
+                /* for sysconf */
+#endif
 #endif
 #ifdef TIME
-extern long     time();
-                /* see library function "time"  */
+#include <time.h>
 #define Too_Small_Time 2
                 /* Measurements should last at least 2 seconds */
 #endif
@@ -65,8 +72,38 @@
 
 /* end of variables for time measurement */
 
+#endif  /* BENCHMARK_ONLY */
 
+
+void Init(void)
+{
+  static Rec_Type Buf_Next_Ptr_Glob;
+  static Rec_Type Buf_Ptr_Glob;
+
+  Next_Ptr_Glob = &Buf_Next_Ptr_Glob;
+  Ptr_Glob = &Buf_Ptr_Glob;
+
+  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
+  Ptr_Glob->Discr                       = Ident_1;
+  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
+  Ptr_Glob->variant.var_1.Int_Comp      = 40;
+  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
+          "DHRYSTONE PROGRAM, SOME STRING");
+
+  Arr_2_Glob [8][7] = 10;
+        /* Was missing in published program. Without this statement,    */
+        /* Arr_2_Glob [8][7] would have an undefined value.             */
+        /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
+        /* overflow may occur for this array element.                   */
+}
+
+
+#ifndef BENCHMARK_ONLY
 main ()
+#else
+int Main(Number_Of_Runs)
+REG int Number_Of_Runs;
+#endif
 /*****/
 
   /* main program, corresponds to procedures        */
@@ -80,29 +117,21 @@
         Str_30          Str_1_Loc;
         Str_30          Str_2_Loc;
   REG   int             Run_Index;
+#ifndef BENCHMARK_ONLY
   REG   int             Number_Of_Runs;
+#endif
 
   /* Initializations */
 
-  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
-  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
-
-  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
-  Ptr_Glob->Discr                       = Ident_1;
-  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
-  Ptr_Glob->variant.var_1.Int_Comp      = 40;
-  strcpy (Ptr_Glob->variant.var_1.Str_Comp, 
-          "DHRYSTONE PROGRAM, SOME STRING");
+#ifndef BENCHMARK_ONLY
+  Init ();
+#endif
   strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
 
-  Arr_2_Glob [8][7] = 10;
-        /* Was missing in published program. Without this statement,    */
-        /* Arr_2_Glob [8][7] would have an undefined value.             */
-        /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
-        /* overflow may occur for this array element.                   */
+#ifndef BENCHMARK_ONLY
 
   printf ("\n");
-  printf ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
+  printf ("Dhrystone Benchmark, Version 2.1-AC (Language: C)\n");
   printf ("\n");
   if (Reg)
   {
@@ -136,6 +165,8 @@
   Begin_Time = time ( (long *) 0);
 #endif
 
+#endif  /* BENCHMARK_ONLY */
+
   for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
   {
 
@@ -182,6 +213,8 @@
 
   } /* loop "for Run_Index" */
 
+#ifndef BENCHMARK_ONLY
+
   /**************/
   /* Stop timer */
   /**************/
@@ -262,6 +295,9 @@
                         / (float) Number_Of_Runs;
     Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time;
 #else
+#ifndef HZ
+    int HZ = sysconf(_SC_CLK_TCK);
+#endif
     Microseconds = (float) User_Time * Mic_secs_Per_Second 
                         / ((float) HZ * ((float) Number_Of_Runs));
     Dhrystones_Per_Second = ((float) HZ * (float) Number_Of_Runs)
@@ -273,6 +309,32 @@
     printf ("%6.1f \n", Dhrystones_Per_Second);
     printf ("\n");
   }
+
+#else  /* BENCHMARK_ONLY */
+
+  return Int_Glob == 5
+      && Bool_Glob == 1
+      && Ch_1_Glob == 'A'
+      && Ch_2_Glob == 'B'
+      && Arr_1_Glob[8] == 7
+      && Arr_2_Glob[8][7] == Number_Of_Runs + 10
+      && Ptr_Glob->Discr == 0
+      && Ptr_Glob->variant.var_1.Enum_Comp == 2
+      && Ptr_Glob->variant.var_1.Int_Comp == 17
+      && strcmp(Ptr_Glob->variant.var_1.Str_Comp, "DHRYSTONE PROGRAM, SOME STRING") == 0
+      && Next_Ptr_Glob->Ptr_Comp == Ptr_Glob->Ptr_Comp
+      && Next_Ptr_Glob->Discr == 0
+      && Next_Ptr_Glob->variant.var_1.Enum_Comp == 1
+      && Next_Ptr_Glob->variant.var_1.Int_Comp == 18
+      && strcmp(Next_Ptr_Glob->variant.var_1.Str_Comp, "DHRYSTONE PROGRAM, SOME STRING") == 0
+      && Int_1_Loc == 5
+      && Int_2_Loc == 13
+      && Int_3_Loc == 7
+      && Enum_Loc == 1
+      && strcmp(Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING") == 0
+      && strcmp(Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING") == 0;
+
+#endif
   
 }
 
@@ -314,7 +376,7 @@
 Proc_2 (Int_Par_Ref)
 /******************/
     /* executed once */
-    /* *Int_Par_Ref == 1, becomes 4 */
+    /* *Int_Par_Ref == 1, becomes 5 */
 
 One_Fifty   *Int_Par_Ref;
 {
diff -r 6fbc109affc2 benchmarks/dhrystone/dhry_2.c
--- a/benchmarks/dhrystone/dhry_2.c	Thu Oct 13 02:04:35 2016 +0900
+++ b/benchmarks/dhrystone/dhry_2.c	Fri Oct 21 20:40:29 2016 +0900
@@ -4,11 +4,12 @@
  *                   "DHRYSTONE" Benchmark Program
  *                   -----------------------------
  *                                                                            
- *  Version:    C, Version 2.1
+ *  Version:    C, Version 2.1-AC
  *                                                                            
  *  File:       dhry_2.c (part 3 of 3)
  *
  *  Date:       May 25, 1988
+ *              (Version 2.1-AC: October 16, 2016)
  *
  *  Author:     Reinhold P. Weicker
  *
