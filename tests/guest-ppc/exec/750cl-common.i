/*
 * libbinrec: a recompiling translator for machine code
 * Copyright (c) 2016 Andrew Church <achurch@achurch.org>
 *
 * This software may be copied and redistributed under certain conditions;
 * see the file "COPYING" in the source code distribution for details.
 * NO WARRANTY is provided with this software.
 */

/*
 * This file should be included in all tests that run the 750CL test
 * routine; it defines the data array for the routine itself and provides
 * appropriate handlers and setup code.  Call setup_750cl() to set up a
 * state block.
 */

#include "tests/ppc-lut.h"

/*************************************************************************/
/*************************** PowerPC test code ***************************/
/*************************************************************************/

/* These files are automatically generated with the contents of the test
 * code assembled under various configurations.  The test source
 * (ppc750cl.s) and the script used to generate this file
 * (gen-ppc750cl-bin.pl) live in the etc/ppc directory. */
#if defined(USE_750CL_NO_FPSCR_STATE)
    #include "tests/guest-ppc/exec/ppc750cl-nofpscr-bin.i"
#elif defined(USE_750CL_NO_RECIPROCAL_TABLES)
    #include "tests/guest-ppc/exec/ppc750cl-notables-bin.i"
#else
    #include "tests/guest-ppc/exec/ppc750cl-bin.i"
#endif

/* Constants for the test routine. */
#define PPC750CL_MEMORY_SIZE        0x2000000
#define PPC750CL_START_ADDRESS      0x1000000
#define PPC750CL_SCRATCH_ADDRESS    0x100000
#define PPC750CL_ERROR_LOG_ADDRESS  0x200000

/*************************************************************************/
/************************* Expected error lists **************************/
/*************************************************************************/

/*
 * Include the appropriate error sets in an array of FailureRecord, and
 * pass the array with its length to check_750cl_errors().
 */

typedef struct FailureRecord {
    uint32_t insn;
    uint32_t address;
    uint32_t data[6];
} FailureRecord;

/* Expected errors for all tests. */
#define EXPECTED_ERRORS_COMMON  \
    /* stwcx. to different address, not handled by the translator. */        \
    {0x7C60212D,0x0100A610, {0xFFFFFFFF,0xFFFFFFFF, 0x00000000,0x00000000}}, \
    /* lfd/paired-single data hazard. */                                     \
    {0xC89F0008,0x0100B778, {0x3FF00000,0x00000000, 0x00000000,0x00000000}}, \
    /* lfd/ps_merge misbehavior. */                                          \
    {0x10652C20,0x0100B81C, {0x00000000,0x00000000, 0x00000000,0x00000000}}, \
    /* lfd/ps_rsqrte misbehavior. */                                         \
    {0x11A01834,0x01011A40, {0x00000000,0x00000000, 0x1F800041,0x00002000}}, \
    {0x11A02034,0x01011AD8, {0x7FF00000,0x00000000, 0x3F7FF400,0x84005000}}
/* Same, for the no-reciprocal-tables version of the test code. */
#define EXPECTED_ERRORS_COMMON_NO_RECIPROCAL_TABLES  \
    {0x7C60212D,0x01009F40, {0xFFFFFFFF,0xFFFFFFFF, 0x00000000,0x00000000}}, \
    {0xC89F0008,0x0100B0B8, {0x3FF00000,0x00000000, 0x00000000,0x00000000}}, \
    {0x10652C20,0x0100B15C, {0x00000000,0x00000000, 0x00000000,0x00000000}}, \
    {0x11A01834,0x01010F68, {0x00000000,0x00000000, 0x1F800041,0x00002000}}, \
    {0x11A02034,0x01011000, {0x7FF00000,0x00000000, 0x3F7FF400,0x84005000}}

/* Expected errors for the ASSUME_NO_SNAN optimization. */
#define EXPECTED_ERRORS_ASSUME_NO_SNAN  \
    /* lfs on an SNaN. */                                                    \
    {0xC1040000,0x0100636C, {0x7FFC0000,0x00000000, 0xFFFFFFFF,0x00000000}}, \
    /* lfsx on an SNaN. */                                                   \
    {0x7D00242E,0x010064DC, {0x7FFC0000,0x00000000, 0xFFFFFFFF,0x00000000}}, \
    /* stfs on an SNaN. */                                                   \
    {0xD1040000,0x01006630, {0x7FE00000,0x00000000, 0xFFFFFFFF,0x00000000}}, \
    /* stfsx on an SNaN. */                                                  \
    {0x7D00252E,0x01006770, {0x7FE00000,0x00000000, 0xFFFFFFFF,0x00000000}}, \
    /* fres on an SNaN. */                                                   \
    {0xEC605830,0x010098D4, {0xFFFC0000,0x00000000, 0x00011000,0x00000000}}, \
    {0xEC602830,0x010098F8, {0xFFFC0000,0x00000000, 0x00011000,0x00000000}}, \
    {0xEC805830,0x01009948, {0xFFFC0000,0x00000000, 0x00011000,0x00000000}}, \
    {0xEC801030,0x01009968, {0x3FDFFF00,0x00000000, 0x00004000,0x00000000}}, \
    {0xEC601831,0x010099E4, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* Spurious failure caused by a stale SNaN exception picked up by the    \
     * fmuls at the end of calc_fres. */                                     \
    {0xECA02030,0x01009B40, {0x3EFFF800,0x3EFFF800, 0x00004000,0x40000000}}, \
    /* Paired-single operations on SNaNs (which were quieted when loaded     \
     * with lfs). */                                                         \
    {0x10673C60,0x0100AA44, {0xFFE00000,0xFFE00000, 0x80000000,0x80000000}}, \
    {0xE07E0014,0x0100AFE0, {0x7FD00000,0xFFE00000, 0x00000000,0x00000000}}, \
    {0xE07E8018,0x0100B030, {0xFFE00000,0x3F800000, 0x00000000,0x00000000}}, \
    {0x10603890,0x0100BA64, {0xFFE00000,0xFFE00000, 0x80000000,0x20000000}}, \
    {0x10603850,0x0100BCE0, {0x7FE00000,0x7FE00000, 0x80000000,0x20000000}}, \
    {0x10603A10,0x0100C070, {0x7FE00000,0x7FE00000, 0x80000000,0x20000000}}, \
    {0x10603910,0x0100C35C, {0xFFE00000,0xFFE00000, 0x80000000,0x20000000}}, \
    /* Stale SNaN exception picked up by ps_cmpu0. */                        \
    {0x10000000,0x0100C50C, {0x20000000,0x00000000, 0xA1002000,0x00000000}}, \
    {0x10810000,0x0100C550, {0x24000000,0x00000000, 0xA1004000,0x00000000}}, \
    {0x13880000,0x0100C594, {0x00000008,0x00000000, 0xA1008000,0x00000000}}, \
    {0x13860000,0x0100C5D0, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    /* ps_cmpu0 on SNaNs. */                                                 \
    {0x13870000,0x0100C650, {0x00000001,0x00000000, 0x00001000,0x00000000}}, \
    {0x13803800,0x0100C694, {0x00000001,0x00000000, 0x00001000,0x00000000}}, \
    {0x12803800,0x0100C6D8, {0x00000100,0x00000000, 0x00001000,0x00000000}}, \
    {0x12800000,0x0100C718, {0x00000200,0x00000000, 0x00002000,0x00000000}}, \
    /* ps_cmpo0 on SNaNs. */                                                 \
    {0x13870040,0x0100C9E8, {0x00000001,0x00000000, 0xA0081000,0x00000000}}, \
    {0x13803840,0x0100CA2C, {0x00000001,0x00000000, 0xA0081000,0x00000000}}, \
    {0x12803840,0x0100CA70, {0x00000100,0x00000000, 0x20081000,0x00000000}}, \
    {0x12800040,0x0100CAB0, {0x00000200,0x00000000, 0x20082000,0x00000000}}, \
    {0x13070040,0x0100CAF8, {0x00000010,0x00000000, 0xE0081080,0x00000000}}, \
    {0x13003840,0x0100CB40, {0x00000010,0x00000000, 0xE0081080,0x00000000}}, \
    {0x12003840,0x0100CB84, {0x00001000,0x00000000, 0x60081080,0x00000000}}, \
    {0x12000040,0x0100CBC4, {0x00002000,0x00000000, 0x60082080,0x00000000}}, \
    /* ps_cmpu1 on SNaNs. */                                                 \
    {0x13870080,0x0100CE8C, {0x00000001,0x00000000, 0x00001000,0x00000000}}, \
    {0x13803880,0x0100CED0, {0x00000001,0x00000000, 0x00001000,0x00000000}}, \
    {0x12803880,0x0100CF14, {0x00000100,0x00000000, 0x00001000,0x00000000}}, \
    {0x12800080,0x0100CF54, {0x00000200,0x00000000, 0x00002000,0x00000000}}, \
    /* ps_cmpo1 on SNaNs. */                                                 \
    {0x138700C0,0x0100D128, {0x00000001,0x00000000, 0xA0081000,0x00000000}}, \
    {0x138038C0,0x0100D16C, {0x00000001,0x00000000, 0xA0081000,0x00000000}}, \
    {0x128038C0,0x0100D1B0, {0x00000100,0x00000000, 0x20081000,0x00000000}}, \
    {0x128000C0,0x0100D1F0, {0x00000200,0x00000000, 0x20082000,0x00000000}}, \
    {0x130700C0,0x0100D238, {0x00000010,0x00000000, 0xE0081080,0x00000000}}, \
    {0x130038C0,0x0100D280, {0x00000010,0x00000000, 0xE0081080,0x00000000}}, \
    {0x120038C0,0x0100D2C4, {0x00001000,0x00000000, 0x60081080,0x00000000}}, \
    {0x120000C0,0x0100D304, {0x00002000,0x00000000, 0x60082080,0x00000000}}, \
    /* ps_add on SNaNs. */                                                   \
    {0x1061582A,0x0100D4AC, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B082A,0x0100D4D0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x1061702A,0x0100D52C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x1078082A,0x0100D54C, {0x41500000,0x40000000, 0x4A800002,0x00004000}}, \
    {0x1065202A,0x0100D56C, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x1065682A,0x0100D5A0, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x106D282A,0x0100D5DC, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x1061582B,0x0100D72C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x1061182B,0x0100D77C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_sum0 on SNaNs. */                                                  \
    {0x10615814,0x0100D84C, {0xFFFC0000,0x00000000, 0x00000000,0x00011000}}, \
    {0x106B0854,0x0100D870, {0xFFFC0000,0x00000000, 0x3F800000,0x00011000}}, \
    {0x10615894,0x0100D8C8, {0xFFFC0000,0x00000000, 0x40000000,0x00011000}}, \
    {0x1061C094,0x0100D8E8, {0x41500000,0x40000000, 0x40000000,0x00004000}}, \
    {0x10642AD4,0x0100D950, {0x40080000,0x00000000, 0xFFE00000,0x00004000}}, \
    {0x10615815,0x0100DA38, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10611895,0x0100DA88, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_sum1 on SNaNs. */                                                  \
    {0x10615816,0x0100DB58, {0x00000000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B0856,0x0100DB7C, {0x3FF00000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10615896,0x0100DBD4, {0x40000000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x1061C096,0x0100DBF4, {0x40000000,0x00000000, 0x4A800002,0x00004000}}, \
    {0x10642AD6,0x0100DC5C, {0xFFFC0000,0x00000000, 0x40400000,0x00004000}}, \
    /* ps_sum1 excess precision (exceptions improperly generated by format   \
     * conversion when copying from frC). */                                 \
    {0x10612916,0x0100DCC8, {0x3FF55555,0x60000000, 0x00000000,0x82022000}}, \
    {0x106128D6,0x0100DCFC, {0x7FF00000,0x00000000, 0x00000000,0x92022000}}, \
    {0x10610916,0x0100DD34, {0x40000000,0x00000000, 0x40000000,0x82024000}}, \
    /* ps_sum1 (Rc=1) on SNaNs. */                                           \
    {0x10615817,0x0100DD4C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10611897,0x0100DD9C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_sub on SNaNs. */                                                   \
    {0x10615828,0x0100DE70, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B0828,0x0100DE94, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10617028,0x0100DEF0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106E0828,0x0100DF14, {0x41500000,0x00000000, 0x4A800000,0x00004000}}, \
    {0x10652028,0x0100DF38, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x10656828,0x0100DF70, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x106D2828,0x0100DFB0, {0xFFF00000,0x00000000, 0xFFE00000,0x92029000}}, \
    {0x10615829,0x0100E10C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10611829,0x0100E15C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_mul on SNaNs. */                                                   \
    {0x106102F2,0x0100E2A0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B0072,0x0100E2C4, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106103B2,0x0100E31C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x107C00B2,0x0100E33C, {0x41500000,0x00000000, 0x4A800000,0x00004000}}, \
    {0x10650132,0x0100E35C, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x10650372,0x0100E390, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x106D0172,0x0100E3CC, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x106102F3,0x0100E9AC, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x106100F3,0x0100E9FC, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_muls0 on SNaNs. */                                                 \
    {0x10650118,0x0100EA70, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10650358,0x0100EA9C, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x10650119,0x0100EACC, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10650359,0x0100EB24, {0xFFFFFFFF,0x00000000, 0x09000000,0x00000000}}, \
    /* ps_muls1 on SNaNs. */                                                 \
    {0x1065011A,0x0100EBA0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x1065035A,0x0100EBCC, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x1065011B,0x0100EBFC, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x1065035B,0x0100EC54, {0xFFFFFFFF,0x00000000, 0x09000000,0x00000000}}, \
    /* ps_div on SNaNs. */                                                   \
    {0x10615824,0x0100ED60, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B0824,0x0100ED84, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10617024,0x0100EE38, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10780824,0x0100EE58, {0x41500000,0x00000000, 0x4A800000,0x00004000}}, \
    {0x10652024,0x0100EE78, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x10656824,0x0100EEAC, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x106D2824,0x0100EEE8, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x10615825,0x0100F0A4, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10611825,0x0100F0F4, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_madd on SNaNs. */                                                  \
    {0x10605B7A,0x0100F288, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106112FA,0x0100F2B8, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106158BA,0x0100F2D0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B107A,0x0100F30C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106113BA,0x0100F3E8, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x107C08BA,0x0100F408, {0x41500000,0x40000000, 0x4A800002,0x00004000}}, \
    {0x1065693A,0x0100F42C, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x1065237A,0x0100F464, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x106D217A,0x0100F4A4, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x106112FB,0x0100F830, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x106110FB,0x0100F880, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_madds0 on SNaNs. */                                                \
    {0x1065291C,0x0100F8F4, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10650B5C,0x0100F920, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x1065291D,0x0100F950, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10650B5D,0x0100F9A8, {0xFFFFFFFF,0x00000000, 0x09000000,0x00000000}}, \
    /* ps_madds1 on SNaNs. */                                                \
    {0x1065291E,0x0100FA24, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10650B5E,0x0100FA50, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x1065291F,0x0100FA80, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10650B5F,0x0100FAD8, {0xFFFFFFFF,0x00000000, 0x09000000,0x00000000}}, \
    /* ps_msub on SNaNs. */                                                  \
    {0x10605B78,0x0100FC70, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106112F8,0x0100FCA0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106158B8,0x0100FCB8, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B1078,0x0100FCF0, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106113B8,0x0100FD74, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10610FB8,0x0100FD94, {0x41500000,0x00000000, 0x4A800000,0x00004000}}, \
    {0x10656938,0x0100FDB8, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x10652378,0x0100FDF0, {0xFFFC0000,0x00000000, 0x7F800000,0x92031000}}, \
    {0x106D2178,0x0100FE30, {0x7FF00000,0x00000000, 0xFFE00000,0x92025000}}, \
    {0x106112F9,0x01010158, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x106110F9,0x010101A8, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_nmadd on SNaNs. */                                                 \
    {0x10605B7E,0x01010338, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106112FE,0x01010368, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106158BE,0x01010380, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B107E,0x010103BC, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106113BE,0x01010444, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x107C08BE,0x01010464, {0xC1500000,0x40000000, 0xCA800002,0x00008000}}, \
    {0x1065693E,0x01010488, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x1065237E,0x010104C0, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x106D217E,0x01010500, {0xFFF00000,0x00000000, 0xFFE00000,0x92029000}}, \
    {0x106112FF,0x01010870, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x106110FF,0x010108C0, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_nmsub on SNaNs. */                                                 \
    {0x10605B7C,0x01010A4C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106112FC,0x01010A7C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106158BC,0x01010A94, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106B107C,0x01010ACC, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x106112FC,0x01010B50, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x107E087C,0x01010B70, {0xC1500000,0x00000000, 0xCA800000,0x00008000}}, \
    {0x1065693C,0x01010B94, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x1065237C,0x01010BCC, {0xFFFC0000,0x00000000, 0xFF800000,0x92031000}}, \
    {0x106D217C,0x01010C0C, {0xFFF00000,0x00000000, 0xFFE00000,0x92029000}}, \
    {0x106112FD,0x01010F38, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x106110FD,0x01010F88, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_res on SNaNs. */                                                   \
    {0x10605830,0x0101117C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10602830,0x010111A4, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10607030,0x01011200, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10607830,0x01011224, {0x3FDFFF00,0x00000000, 0x3EFFF800,0x00004000}}, \
    {0x11C01830,0x0101124C, {0xFFFC0000,0x00000000, 0x7F7FFFFF,0x90031000}}, \
    {0x11C02030,0x01011284, {0xFFFC0000,0x00000000, 0x7F7FFFFF,0x90031000}}, \
    {0x11C02830,0x010112C4, {0x47EFFFFF,0xE0000000, 0xFFE00000,0x90024000}}, \
    {0x10605831,0x01011324, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10601831,0x01011374, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_rsqrte on SNaNs. */                                                \
    {0x10605834,0x0101186C, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10602834,0x01011894, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10607034,0x01011918, {0xFFFC0000,0x00000000, 0xFFE00000,0x00011000}}, \
    {0x10607834,0x0101193C, {0x3FFFFE80,0x00000000, 0x3FFFF400,0x00004000}}, \
    {0x11C01834,0x01011960, {0xFFFC0000,0x00000000, 0x3F34FD00,0x00011000}}, \
    {0x11C02034,0x01011998, {0xFFFC0000,0x00000000, 0x3F34FD00,0x00011000}}, \
    {0x11C02834,0x010119CC, {0x3FE69FA0,0x00000000, 0xFFE00000,0x00004000}}, \
    {0x10605835,0x01011B5C, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    {0x10601835,0x01011BAC, {0xFFFFFFFF,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_sel with Rc=1 after an SNaN operation. */                          \
    {0x1062006F,0x01011FCC, {0x00000000,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF}}

/* Expected errors for the FAST_FMULS optimization. */
#define EXPECTED_ERRORS_FAST_FMULS  \
    /* frC rounding tests for fmuls. */                                      \
    {0xEC6D00F2,0x010075C8, {0x40000000,0x00000000, 0x82024000,0x00000000}}, \
    {0xEDA40372,0x010076C4, {0x3CD00000,0x00000000, 0x82024000,0x00000000}}, \
    {0xEC640372,0x010076F0, {0xBCD00000,0x00000000, 0x82028000,0x00000000}}, \
    {0xEDA100F2,0x01007710, {0x3FF00000,0x00000000, 0x82024000,0x00000000}}, \
    {0xEC830132,0x0100774C, {0x3E5FFFFF,0xE0000000, 0x82024000,0x00000000}}, \
    {0xEDA30132,0x010077F0, {0xBE5FFFFF,0xE0000000, 0x82028000,0x00000000}}, \
    /* frC rounding tests for fmadds. */                                     \
    {0xEC6D20FA,0x01008188, {0x40000000,0x00000000, 0x00004000,0x00000000}}, \
    {0xEC81693A,0x0100823C, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    /* frC rounding tests for fmsubs. */                                     \
    {0xEC6D20F8,0x01008708, {0x40000000,0x00000000, 0x00004000,0x00000000}}, \
    {0xEC812138,0x010087AC, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    /* frC rounding tests for fnmadds. */                                    \
    {0xEC6D20FE,0x01008C7C, {0xC0000000,0x00000000, 0x00008000,0x00000000}}, \
    {0xEC81693E,0x01008D3C, {0x80000000,0x00000000, 0x00012000,0x00000000}}, \
    /* frC rounding tests for fnmsubs. */                                    \
    {0xEC6D20FC,0x01009204, {0xC0000000,0x00000000, 0x00008000,0x00000000}}, \
    {0xEC81213C,0x010092AC, {0x80000000,0x00000000, 0x00012000,0x00000000}}, \
    /* frC rounding tests for ps_mul. */                                     \
    {0x106D00F2,0x0100E54C, {0x40000000,0x00000000, 0x00000000,0x82024000}}, \
    {0x106403B2,0x0100E6C0, {0x3CD00000,0x00000000, 0x00000000,0x82024000}}, \
    {0x10640372,0x0100E714, {0xBCD00000,0x00000000, 0x00000000,0x82028000}}, \
    {0x106100F2,0x0100E744, {0x3FF00000,0x00000000, 0x00000000,0x82024000}}, \
    {0x106303B2,0x0100E798, {0x3E5FFFFF,0xE0000000, 0x00000000,0x82024000}}, \
    {0x106D03F2,0x0100E86C, {0xBE5FFFFF,0xE0000000, 0x00000000,0x82028000}}, \
    /* frC rounding tests for ps_madd. */                                    \
    {0x106D20FA,0x0100F574, {0x40000000,0x00000000, 0x00000000,0x00004000}}, \
    {0x1061713A,0x0100F6BC, {0x00000000,0x00000000, 0x00000000,0x00002000}}, \
    /* frC rounding tests for ps_msub. */                                    \
    {0x106D20F8,0x0100FEF0, {0x40000000,0x00000000, 0x00000000,0x00004000}}, \
    {0x10612138,0x01010000, {0x00000000,0x00000000, 0x00000000,0x00002000}}, \
    /* frC rounding tests for ps_nmadd. */                                   \
    {0x106D20FE,0x010105A8, {0xC0000000,0x00000000, 0x80000000,0x00008000}}, \
    {0x1061713E,0x01010700, {0x80000000,0x00000000, 0x80000000,0x00012000}}, \
    /* frC rounding tests for ps_nmsub. */                                   \
    {0x106D20FC,0x01010CCC, {0xC0000000,0x00000000, 0x80000000,0x00008000}}, \
    {0x1061213C,0x01010DE4, {0x80000000,0x00000000, 0x80000000,0x00012000}}

/* Expected errors for the FNMADD_ZERO_SIGN optimization. */
#define EXPECTED_ERRORS_FNMADD_ZERO_SIGN  \
    /* fnmadd expecting a negative zero. */                                  \
    {0xFC64007E,0x010088EC, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    {0xFC60013E,0x01008900, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    {0xFC60207E,0x01008914, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    /* fnmadds with double-precision input expecting a negative zero. */     \
    {0xEC84687E,0x01008D20, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    /* fnmsubs with double-precision input expecting a negative zero. */     \
    {0xEC84207C,0x01009294, {0x00000000,0x00000000, 0x00002000,0x00000000}}, \
    /* ps_nmadd expecting a negative zero. */                                \
    {0x1064007E,0x01010220, {0x00000000,0x00000000, 0x00000000,0x00002000}}, \
    {0x1060013E,0x01010238, {0x00000000,0x00000000, 0x00000000,0x00002000}}, \
    {0x1060207E,0x01010250, {0x00000000,0x00000000, 0x00000000,0x00002000}}, \
    /* ps_nmadd with double-precision input expecting a negative zero. */    \
    {0x1064707E,0x010106C4, {0x00000000,0x00000000, 0x80000000,0x00002000}}, \
    /* ps_nmsub with double-precision input expecting a negative zero. */    \
    {0x1064207C,0x01010DC0, {0x00000000,0x00000000, 0x00000000,0x00002000}}

/* Expected errors for the IGNORE_FPSCR_VXFOO optimization. */
#define EXPECTED_ERRORS_IGNORE_FPSCR_VXFOO  \
    /* fcmpo expecting VXVC. */                                              \
    {0xFF850040,0x01005FA4, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0xFF802840,0x01005FE8, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    /* fcmpo expecting VXSNAN+VXVC. */                                       \
    {0xFF860040,0x0100602C, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0xFF803040,0x01006070, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0xFE803040,0x010060B4, {0x00000100,0x00000000, 0x21001000,0x00000000}}, \
    {0xFE800040,0x010060F4, {0x00000200,0x00000000, 0x21002000,0x00000000}}, \
    /* fadd expecting VXISI. */                                              \
    {0xFC69682A,0x01006D48, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC6D482A,0x01006DCC, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fsub expecting VXISI. */                                              \
    {0xFC694828,0x01006FD0, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC6D6828,0x01007068, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmul expecting VXIMZ. */                                              \
    {0xFC690032,0x010072D8, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600372,0x010072F0, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600272,0x01007370, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fdiv expecting VXIDI or VXZDZ. */                                     \
    {0xFC694824,0x0100792C, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600024,0x0100796C, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC696824,0x010079F0, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC642024,0x01007A1C, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmadd expecting VXIMZ, VXIMZ+VXSNAN, or VXISI. */                     \
    {0xFC6D48BA,0x01007DD0, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69083A,0x01007DFC, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69203A,0x01007E14, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69207A,0x01007E2C, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC60227A,0x01007E44, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC61227A,0x01007E5C, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC605B7A,0x01007E74, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600A7A,0x01007F60, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6968BA,0x01007F8C, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmsub expecting VXIMZ, VXIMZ+VXSNAN, or VXISI. */                     \
    {0xFC6D68B8,0x01008418, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC690838,0x01008448, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC694838,0x0100845C, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC605B78,0x01008474, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600A78,0x0100855C, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6948B8,0x01008584, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fnmadd expecting VXIMZ, VXIMZ+VXSNAN, or VXISI. */                    \
    {0xFC6D48BE,0x01008980, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69083E,0x010089AC, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69203E,0x010089C4, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC605B7E,0x010089DC, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600A7E,0x01008AC8, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6968BE,0x01008AF4, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fnmsub expecting VXIMZ, VXIMZ+VXSNAN, or VXISI. */                    \
    {0xFC6D68BC,0x01008F10, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69083C,0x01008F40, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC69483C,0x01008F54, {0xFFF80000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC605B7C,0x01008F6C, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    {0xFC600A7C,0x01009054, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6948BC,0x0100907C, {0x41500000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fctiw expecting VXCVI without VXSNAN. */                              \
    {0xFC60D01C,0x01009470, {0x7FFFFFFF,0x00000000, 0xA1000100,0x00000000}}, \
    {0xFC60D81C,0x01009484, {0x80000000,0x00000000, 0xA1000100,0x00000000}}, \
    {0xFC60E01C,0x01009498, {0x7FFFFFFF,0x00000000, 0xA1000100,0x00000000}}, \
    {0xFC60E81C,0x010094C0, {0x80000000,0x00000000, 0xA1000100,0x00000000}}, \
    {0xFC60501C,0x010094D4, {0x80000000,0x00000000, 0xA1000100,0x00000000}}, \
    {0xFC80D01C,0x0100957C, {0x3FF00000,0x00000000, 0xE1000100,0x00000000}}, \
    {0xFC80E01C,0x01009590, {0x3FF00000,0x00000000, 0xE1000100,0x00000000}}, \
    {0xFC80501C,0x010095A4, {0x3FF00000,0x00000000, 0xE1000100,0x00000000}}, \
    /* ps_cmpo0 expecting VXVC. */                                           \
    {0x13860040,0x0100C960, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x13803040,0x0100C9A4, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    /* ps_cmpo0 expecting VXSNAN+VXVC. */                                    \
    {0x13870040,0x0100C9E8, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x13803840,0x0100CA2C, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x12803840,0x0100CA70, {0x00000100,0x00000000, 0x21001000,0x00000000}}, \
    {0x12800040,0x0100CAB0, {0x00000200,0x00000000, 0x21002000,0x00000000}}, \
    /* ps_cmpo1 expecting VXVC. */                                           \
    {0x138600C0,0x0100D0A0, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x138030C0,0x0100D0E4, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    /* ps_cmpo1 expecting VXSNAN+VXVC. */                                    \
    {0x138700C0,0x0100D128, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x138038C0,0x0100D16C, {0x00000001,0x00000000, 0xA1001000,0x00000000}}, \
    {0x128038C0,0x0100D1B0, {0x00000100,0x00000000, 0x21001000,0x00000000}}, \
    {0x128000C0,0x0100D1F0, {0x00000200,0x00000000, 0x21002000,0x00000000}}, \
    /* ps_add expecting VXISI. */                                            \
    {0x1069682A,0x0100D480, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x106D482A,0x0100D500, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    /* ps_sum0 expecting VXISI. */                                           \
    {0x10696814,0x0100D820, {0xFFF80000,0x00000000, 0x00000000,0xA1011000}}, \
    {0x106D4814,0x0100D8A0, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106D2914,0x0100D930, {0xFFF80000,0x00000000, 0x3F800000,0xA1011000}}, \
    /* ps_sum1 expecting VXISI. */                                           \
    {0x10696816,0x0100DB2C, {0x00000000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x106D4816,0x0100DBAC, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106D2916,0x0100DC3C, {0x3FF00000,0x00000000, 0xFFC00000,0xA1011000}}, \
    /* ps_sub expecting VXISI. */                                            \
    {0x10694828,0x0100DE2C, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x106D6828,0x0100DEC4, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    /* ps_mul expecting VXIMZ. */                                            \
    {0x10690032,0x0100E258, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10600372,0x0100E274, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10600272,0x0100E2F0, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    /* ps_div expecting VXIDI, VXZDZ, or both. */                            \
    {0x10694824,0x0100ECE8, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10600024,0x0100ED34, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10696824,0x0100EDB4, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x10642024,0x0100EDE4, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x10631824,0x0100EF14, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10652824,0x0100EF40, {0x3FF00000,0x00000000, 0x3F800000,0xE1000000}}, \
    /* ps_madd expecting some combination of VXIMZ (possibly with VXSNAN)    \
     * and VXISI. */                                                         \
    {0x106D48BA,0x0100F220, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069083A,0x0100F250, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069203A,0x0100F26C, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10605B7A,0x0100F288, {0xFFFC0000,0x00000000, 0xFFE00000,0xA1011000}}, \
    {0x10600A7A,0x0100F338, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106968BA,0x0100F368, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106D48FA,0x0100F4D8, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    /* ps_msub expecting VXIMZ[+VXSNAN] and/or VXISI. */                     \
    {0x106D68B8,0x0100FC08, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10690838,0x0100FC3C, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10694838,0x0100FC54, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10605B78,0x0100FC70, {0xFFFC0000,0x00000000, 0xFFE00000,0xA1011000}}, \
    {0x10600A78,0x0100FD1C, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106948B8,0x0100FD48, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    /* ps_nmadd expecting VXIMZ[+VXSNAN] and/or VXISI. */                    \
    {0x106D48BE,0x010102D0, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069083E,0x01010300, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069203E,0x0101031C, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10605B7E,0x01010338, {0xFFFC0000,0x00000000, 0xFFE00000,0xA1011000}}, \
    {0x10600A7E,0x010103E8, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106968BE,0x01010418, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    /* ps_nmsub expecting VXIMZ[+VXSNAN] and/or VXISI. */                    \
    {0x106D68BC,0x010109E4, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069083C,0x01010A18, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x1069483C,0x01010A30, {0xFFF80000,0x00000000, 0xFFC00000,0xA1011000}}, \
    {0x10605B7C,0x01010A4C, {0xFFFC0000,0x00000000, 0xFFE00000,0xA1011000}}, \
    {0x10600A7C,0x01010AF8, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}, \
    {0x106948BC,0x01010B24, {0x41500000,0x00000000, 0x4A800000,0xE1000000}}

/* Expected errors for the NATIVE_IEEE_NAN optimization. */
#define EXPECTED_ERRORS_NATIVE_IEEE_NAN  \
    /* fadd returns default QNaN from subtraction of infinities. */          \
    {0xFC69682A,0x01006D48, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    /* fsub returns default QNaN from subtraction of infinities. */          \
    {0xFC694828,0x01006FD0, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    /* fmul returns default QNaN from infinity * 0. */                       \
    {0xFC690032,0x010072D8, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC600372,0x010072F0, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    /* fdiv returns default QNaN from infinity / infinity. */                \
    {0xFC694824,0x0100792C, {0xFFF80000,0x00000000, 0xA0411000,0x00000000}}, \
    /* fdiv returns default QNaN from 0 / 0. */                              \
    {0xFC600024,0x0100796C, {0xFFF80000,0x00000000, 0xA0211000,0x00000000}}, \
    /* fmadd returns default QNaN from inf - inf or inf * 0. */              \
    {0xFC6D48BA,0x01007DD0, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    {0xFC69083A,0x01007DFC, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC69203A,0x01007E14, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC69207A,0x01007E2C, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    {0xFC60227A,0x01007E44, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC61227A,0x01007E5C, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    /* fmadd chooses frB NaN (addend) over frC NaN (multiplier). */          \
    {0xFC6052FA,0x01007F00, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    /* fmsub returns default QNaN from inf - inf or inf * 0. */              \
    {0xFC6D68B8,0x01008418, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    {0xFC690838,0x01008448, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC694838,0x0100845C, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    /* fmsub chooses frB NaN (addend) over frC NaN (multiplier). */          \
    {0xFC6052F8,0x010084FC, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    /* fnmadd returns default QNaN from inf - inf or inf * 0. */             \
    {0xFC6D48BE,0x01008980, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    {0xFC69083E,0x010089AC, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC69203E,0x010089C4, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    /* fnmadd chooses frB NaN (addend) over frC NaN (multiplier). */         \
    {0xFC6052FE,0x01008A68, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    /* fnmsub returns default QNaN from inf - inf or inf * 0. */             \
    {0xFC6D68BC,0x01008F10, {0xFFF80000,0x00000000, 0xA0811000,0x00000000}}, \
    {0xFC69083C,0x01008F40, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    {0xFC69483C,0x01008F54, {0xFFF80000,0x00000000, 0xA0111000,0x00000000}}, \
    /* fnmsub chooses frB NaN (addend) over frC NaN (multiplier). */         \
    {0xFC6052FC,0x01008FF4, {0xFFFC0000,0x00000000, 0xA1011000,0x00000000}}, \
    /* ps_add returns default QNaN from subtraction of infinities. */        \
    {0x1069682A,0x0100D480, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    /* ps_sum0 returns default QNaN from subtraction of infinities. */       \
    {0x10696814,0x0100D820, {0xFFF80000,0x00000000, 0x00000000,0xA0811000}}, \
    {0x106D2914,0x0100D930, {0xFFF80000,0x00000000, 0x3F800000,0xA0811000}}, \
    /* ps_sum1 returns default QNaN from subtraction of infinities. */       \
    {0x10696816,0x0100DB2C, {0x00000000,0x00000000, 0xFFC00000,0xA0811000}}, \
    {0x106D2916,0x0100DC3C, {0x3FF00000,0x00000000, 0xFFC00000,0xA0811000}}, \
    /* ps_sub returns default QNaN from subtraction of infinities. */        \
    {0x10694828,0x0100DE2C, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    /* ps_mul returns default QNaN from infinity * 0. */                     \
    {0x10690032,0x0100E258, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x10600372,0x0100E274, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    /* ps_div returns default QNaN from infinity / infinity or 0 / 0. */     \
    {0x10694824,0x0100ECE8, {0xFFF80000,0x00000000, 0xFFC00000,0xA0411000}}, \
    {0x10600024,0x0100ED34, {0xFFF80000,0x00000000, 0xFFC00000,0xA0211000}}, \
    {0x10631824,0x0100EF14, {0xFFF80000,0x00000000, 0xFFC00000,0xA0611000}}, \
    /* ps_madd returns default QNaN from inf - inf or inf * 0. */            \
    {0x106D48BA,0x0100F220, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    {0x1069083A,0x0100F250, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x1069203A,0x0100F26C, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x106D48FA,0x0100F4D8, {0xFFF80000,0x00000000, 0xFFC00000,0xA0911000}}, \
    /* ps_msub returns default QNaN from inf - inf or inf * 0. */            \
    {0x106D68B8,0x0100FC08, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    {0x10690838,0x0100FC3C, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x10694838,0x0100FC54, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    /* ps_nmadd returns default QNaN from inf - inf or inf * 0. */           \
    {0x106D48BE,0x010102D0, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    {0x1069083E,0x01010300, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x1069203E,0x0101031C, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    /* ps_nmsub returns default QNaN from inf - inf or inf * 0. */           \
    {0x106D68BC,0x010109E4, {0xFFF80000,0x00000000, 0xFFC00000,0xA0811000}}, \
    {0x1069083C,0x01010A18, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}, \
    {0x1069483C,0x01010A30, {0xFFF80000,0x00000000, 0xFFC00000,0xA0111000}}

/* Expected errors for the NATIVE_IEEE_UNDERFLOW optimization. */
#define EXPECTED_ERRORS_NATIVE_IEEE_UNDERFLOW  \
    /* fadds result is tiny before rounding. */                              \
    {0xEC63682A,0x01007C54, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    /* fsubs result is tiny before rounding. */                              \
    {0xEC636828,0x01007C70, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    /* fmadd result is tiny before rounding. */                              \
    {0xFC6320FA,0x01007D78, {0x80100000,0x00000000, 0x82028000,0x00000000}}, \
    /* fmadds result is tiny before rounding. */                             \
    {0xEC6320FA,0x0100813C, {0xB8100000,0x00000000, 0x82028000,0x00000000}}, \
    {0xEC64193A,0x010082CC, {0xB8100000,0x00000000, 0x82028000,0x00000000}}, \
    /* fmsub result is tiny before rounding. */                              \
    {0xFC6318F8,0x010083C0, {0x80100000,0x00000000, 0x82028000,0x00000000}}, \
    /* fmsubs result is tiny before rounding. */                             \
    {0xEC6318F8,0x010086B4, {0xB8100000,0x00000000, 0x82028000,0x00000000}}, \
    {0xEC641938,0x01008834, {0xB8100000,0x00000000, 0x82028000,0x00000000}}, \
    /* fnmadd result is tiny before rounding. */                             \
    {0xFC6320FE,0x0100892C, {0x00100000,0x00000000, 0x82024000,0x00000000}}, \
    /* fnmadds result is tiny before rounding. */                            \
    {0xEC6320FE,0x01008C34, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    {0xEC64193E,0x01008DCC, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    /* fnmsub result is tiny before rounding. */                             \
    {0xFC6318FC,0x01008EBC, {0x00100000,0x00000000, 0x82024000,0x00000000}}, \
    /* fnmsubs result is tiny before rounding. */                            \
    {0xEC6318FC,0x010091B4, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    {0xEC64193C,0x01009334, {0x38100000,0x00000000, 0x82024000,0x00000000}}, \
    /* ps_madd result is tiny before rounding. */                            \
    {0x106320FA,0x0100F1B8, {0xB8100000,0x00000000, 0x80800000,0x82028000}}, \
    {0x1064193A,0x0100F7A8, {0xB8100000,0x00000000, 0x80800000,0x82028000}}, \
    /* ps_msub result is tiny before rounding. */                            \
    {0x106318F8,0x0100FBA0, {0xB8100000,0x00000000, 0x80800000,0x82028000}}, \
    {0x10641938,0x010100D0, {0xB8100000,0x00000000, 0x80800000,0x82028000}}, \
    /* ps_nmadd result is tiny before rounding. */                           \
    {0x106320FE,0x0101026C, {0x38100000,0x00000000, 0x00800000,0x82024000}}, \
    {0x1064193E,0x010107EC, {0x38100000,0x00000000, 0x00800000,0x82024000}}, \
    /* ps_nmsub result is tiny before rounding. */                           \
    {0x106318FC,0x01010980, {0x38100000,0x00000000, 0x00800000,0x82024000}}, \
    {0x1064193C,0x01010EB4, {0x38100000,0x00000000, 0x00800000,0x82024000}}

/* Expected errors for the NATIVE_RECIPROCAL optimization (assuming the
 * no-reciprocal-tables version of the test code). */
#define EXPECTED_ERRORS_NATIVE_RECIPROCAL  \
    /* fres expecting HUGE_VALF instead of infinity. */                      \
    {0xEC606830,0x010097F4, {0x7FF00000,0x00000000, 0x90025000,0x00000000}}, \
    {0xEC806830,0x01009810, {0xFFF00000,0x00000000, 0x90029000,0x00000000}}, \
    /* ps_res expecting HUGE_VALF instead of infinity. */                    \
    {0x10606830,0x010109A8, {0x7FF00000,0x00000000, 0x7F800000,0x92025000}}, \
    {0x10806830,0x010109C8, {0xFFF00000,0x00000000, 0xFF800000,0x92029000}}, \
    {0x11C01830,0x01010B8C, {0xFFFC0000,0x00000000, 0x7F800000,0xB1031000}}, \
    {0x11C02830,0x01010C04, {0x3FF00000,0x00000000, 0x3F800000,0xF1025000}}, \
    /* ps_rsqrte expecting exact table result. */                            \
    {0x11C01834,0x01010E88, {0xFFFC0000,0x00000000, 0x3F3504F3,0xA1011000}}, \
    /* lfd/ps_rsqrte misbehavior. */                                         \
    {0x11A01834,0x01010F68, {0x00000000,0x00000000, 0x1F800001,0x82022000}}, \
    {0x11A02034,0x01011000, {0x7FF00000,0x00000000, 0x3F800000,0x84005000}}

/* Expected errors for the NO_FPSCR_STATE optimization. */
#define EXPECTED_ERRORS_NO_FPSCR_STATE  \
    /* frsp not aborted by enabled exception. */                             \
    {0xFC805818,0x01006C04, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC601819,0x01006CC0, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fadd not aborted by enabled exception. */                             \
    {0xFC6B082A,0x01006DA0, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6D482A,0x01006DCC, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC61182B,0x01006E84, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fsub not aborted by enabled exception. */                             \
    {0xFC6B0828,0x0100703C, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC6D6828,0x01007068, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC611829,0x01007120, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmul not aborted by enabled exception. */                             \
    {0xFC6B0072,0x01007348, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC600272,0x01007370, {0xFFF80000,0x00000000, 0xE0100000,0x00000000}}, \
    {0xFC6100F3,0x01007468, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fdiv not aborted by enabled exception. */                             \
    {0xFC6B0824,0x010079C4, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC696824,0x010079F0, {0xFFF80000,0x00000000, 0xE0400000,0x00000000}}, \
    {0xFC642024,0x01007A1C, {0xFFF80000,0x00000000, 0xE0200000,0x00000000}}, \
    {0xFC610024,0x01007A44, {0x7FF00000,0x00000000, 0xC4000000,0x00000000}}, \
    {0xFC611825,0x01007AFC, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmadd not aborted by enabled exception. */                            \
    {0xFC6B107A,0x01007F38, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC600A7A,0x01007F60, {0xFFF80000,0x00000000, 0xE0100000,0x00000000}}, \
    {0xFC6968BA,0x01007F8C, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC6110FB,0x010080AC, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fmsub not aborted by enabled exception. */                            \
    {0xFC6B1078,0x01008534, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC600A78,0x0100855C, {0xFFF80000,0x00000000, 0xE0100000,0x00000000}}, \
    {0xFC6948B8,0x01008584, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC6110F9,0x0100862C, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fnmadd not aborted by enabled exception. */                           \
    {0xFC6B107E,0x01008AA0, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC600A7E,0x01008AC8, {0xFFF80000,0x00000000, 0xE0100000,0x00000000}}, \
    {0xFC6968BE,0x01008AF4, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC6110FF,0x01008B9C, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fnmsub not aborted by enabled exception. */                           \
    {0xFC6B107C,0x0100902C, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC600A7C,0x01009054, {0xFFF80000,0x00000000, 0xE0100000,0x00000000}}, \
    {0xFC6948BC,0x0100907C, {0xFFF80000,0x00000000, 0xE0800000,0x00000000}}, \
    {0xFC6110FD,0x01009124, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* fctiw not aborted by enabled exception. */                            \
    {0xFC80D01C,0x0100957C, {0x3FF00000,0x00000000, 0xE0000100,0x00000000}}, \
    {0xFC80E01C,0x01009590, {0x3FF00000,0x00000000, 0xE0000100,0x00000000}}, \
    {0xFC80501C,0x010095A4, {0x3FF00000,0x00000000, 0xE0000100,0x00000000}}, \
    {0xFC80581C,0x010095B8, {0x3FF00000,0x00000000, 0xE1000100,0x00000000}}, \
    {0xFC60181D,0x01009688, {0x00000000,0x80000000, 0xE1000100,0x00000000}}, \
    /* fres not aborted by enabled exception. */                             \
    {0xEC602830,0x010098F8, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xEC602030,0x01009924, {0x7FF00000,0x00000000, 0xC4000000,0x00000000}}, \
    {0xEC601831,0x010099E4, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* frsqrte not aborted by enabled exception. */                          \
    {0xFC602834,0x01009E3C, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    {0xFC60D834,0x01009E64, {0x7FF80000,0x00000000, 0xE0000200,0x00000000}}, \
    {0xFC602034,0x01009E90, {0xFFF00000,0x00000000, 0xC4000000,0x00000000}}, \
    {0xFC601835,0x01009F50, {0xFFFC0000,0x00000000, 0xE1000000,0x00000000}}, \
    /* ps_add not aborted by enabled exception. */                           \
    {0x106B082A,0x0100D4D0, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x106D482A,0x0100D500, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x1065682A,0x0100D5A0, {0xFFFC0000,0x00000000, 0x7F800000,0xF3020000}}, \
    {0x106D282A,0x0100D5DC, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x1061182B,0x0100D77C, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_sum0 not aborted by enabled exception. */                          \
    {0x106B0854,0x0100D870, {0xFFFC0000,0x00000000, 0x3F800000,0xE1000000}}, \
    {0x106D4814,0x0100D8A0, {0xFFF80000,0x00000000, 0x00000000,0xE0800000}}, \
    {0x10611895,0x0100DA88, {0xFFFC0000,0x00000000, 0x40000000,0xE1000000}}, \
    /* ps_sum1 not aborted by enabled exception. */                          \
    {0x106B0856,0x0100DB7C, {0x3FF00000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x106D4816,0x0100DBAC, {0x00000000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x10611897,0x0100DD9C, {0x40000000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_sub not aborted by enabled exception. */                           \
    {0x106B0828,0x0100DE94, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x106D6828,0x0100DEC4, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x10656828,0x0100DF70, {0xFFFC0000,0x00000000, 0xFF800000,0xF3020000}}, \
    {0x106D2828,0x0100DFB0, {0xFFF00000,0x00000000, 0xFFE00000,0xF3029000}}, \
    {0x10611829,0x0100E15C, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_mul not aborted by enabled exception. */                           \
    {0x106B0072,0x0100E2C4, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10600272,0x0100E2F0, {0xFFF80000,0x00000000, 0xFFC00000,0xE0100000}}, \
    {0x10650372,0x0100E390, {0xFFFC0000,0x00000000, 0x7F800000,0xF3020000}}, \
    {0x106D0172,0x0100E3CC, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x106100F3,0x0100E9FC, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_muls0 not aborted by enabled exception. */                         \
    {0x10650358,0x0100EA9C, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x10650359,0x0100EB24, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    /* ps_muls1 not aborted by enabled exception. */                         \
    {0x1065035A,0x0100EBCC, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x1065035B,0x0100EC54, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    /* ps_div not aborted by enabled exception. */                           \
    {0x106B0824,0x0100ED84, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10696824,0x0100EDB4, {0xFFF80000,0x00000000, 0xFFC00000,0xE0400000}}, \
    {0x10642024,0x0100EDE4, {0xFFF80000,0x00000000, 0xFFC00000,0xE0200000}}, \
    {0x10610024,0x0100EE0C, {0x7FF00000,0x00000000, 0x7F800000,0xC4000000}}, \
    {0x10656824,0x0100EEAC, {0xFFFC0000,0x00000000, 0x7F800000,0xF3020000}}, \
    {0x106D2824,0x0100EEE8, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x10652824,0x0100EF40, {0xFFF80000,0x00000000, 0xFFC00000,0xE0600000}}, \
    {0x10612024,0x0100EF74, {0x3FE00000,0x00000000, 0x7F800000,0xC4004000}}, \
    {0x10657024,0x0100EFA8, {0x7FF00000,0x00000000, 0x7F800000,0xD6020000}}, \
    {0x10611825,0x0100F0F4, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_madd not aborted by enabled exception. */                          \
    {0x106B107A,0x0100F30C, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10600A7A,0x0100F338, {0xFFF80000,0x00000000, 0xFFC00000,0xE0100000}}, \
    {0x106968BA,0x0100F368, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x1065237A,0x0100F464, {0xFFFC0000,0x00000000, 0x7F800000,0xF3020000}}, \
    {0x106D217A,0x0100F4A4, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x106110FB,0x0100F880, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_madds0 not aborted by enabled exception. */                        \
    {0x10650B5C,0x0100F920, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x10650B5D,0x0100F9A8, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    /* ps_madds1 not aborted by enabled exception. */                        \
    {0x10650B5E,0x0100FA50, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x10650B5F,0x0100FAD8, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    /* ps_msub not aborted by enabled exception. */                          \
    {0x106B1078,0x0100FCF0, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10600A78,0x0100FD1C, {0xFFF80000,0x00000000, 0xFFC00000,0xE0100000}}, \
    {0x106948B8,0x0100FD48, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x10652378,0x0100FDF0, {0xFFFC0000,0x00000000, 0x7F800000,0xF3020000}}, \
    {0x106D2178,0x0100FE30, {0x7FF00000,0x00000000, 0xFFE00000,0xF3025000}}, \
    {0x106110F9,0x010101A8, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_nmadd not aborted by enabled exception. */                         \
    {0x106B107E,0x010103BC, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10600A7E,0x010103E8, {0xFFF80000,0x00000000, 0xFFC00000,0xE0100000}}, \
    {0x106968BE,0x01010418, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x1065237E,0x010104C0, {0xFFFC0000,0x00000000, 0xFF800000,0xF3020000}}, \
    {0x106D217E,0x01010500, {0xFFF00000,0x00000000, 0xFFE00000,0xF3029000}}, \
    {0x106110FF,0x010108C0, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_nmsub not aborted by enabled exception. */                         \
    {0x106B107C,0x01010ACC, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10600A7C,0x01010AF8, {0xFFF80000,0x00000000, 0xFFC00000,0xE0100000}}, \
    {0x106948BC,0x01010B24, {0xFFF80000,0x00000000, 0xFFC00000,0xE0800000}}, \
    {0x1065237C,0x01010BCC, {0xFFFC0000,0x00000000, 0xFF800000,0xF3020000}}, \
    {0x106D217C,0x01010C0C, {0xFFF00000,0x00000000, 0xFFE00000,0xF3029000}}, \
    {0x106110FD,0x01010F88, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_res not aborted by enabled exception. */                           \
    {0x10602830,0x010111A4, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x10602030,0x010111D4, {0x7FF00000,0x00000000, 0x7F800000,0xC4000000}}, \
    {0x11C02030,0x01011284, {0xFFFC0000,0x00000000, 0x7F7FFFFF,0xF1020000}}, \
    {0x11C02830,0x010112C4, {0x47EFFFFF,0xE0000000, 0xFFE00000,0xF1024000}}, \
    {0x11C06830,0x01011300, {0x3FDFFF00,0x00000000, 0x7F800000,0xC4004000}}, \
    {0x10601831,0x01011374, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    /* ps_rsqrte not aborted by enabled exception. */                        \
    {0x10602834,0x01011894, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}, \
    {0x1060D834,0x010118C0, {0x7FF80000,0x00000000, 0x7FC00000,0xE0000200}}, \
    {0x10602034,0x010118EC, {0xFFF00000,0x00000000, 0xFF800000,0xC4000000}}, \
    {0x11C02034,0x01011998, {0xFFFC0000,0x00000000, 0x3F34FD00,0xE1000000}}, \
    {0x11C02834,0x010119CC, {0x3FE69FA0,0x00000000, 0xFFE00000,0xE1004000}}, \
    {0x11C06834,0x01011A00, {0x3FE69FA0,0x00000000, 0x7F800000,0xC4004000}}, \
    /* lfd/ps_rsqrte misbehavior. */                                         \
    {0x11A01834,0x01011A40, {0x00000000,0x00000000, 0x1F800041,0x00000000}}, \
    {0x11A02034,0x01011AD8, {0x7FF00000,0x00000000, 0x00000000,0x00000000}}, \
    /* ps_rsqrte not aborted by enabled exception, continued. */             \
    {0x10601835,0x01011BAC, {0xFFFC0000,0x00000000, 0xFFE00000,0xE1000000}}

/* Expected errors for the PS_STORE_DENORMALS optimization. */
#define EXPECTED_ERRORS_PS_STORE_DENORMALS  \
    /* psq_st of denormal values, not zeroed due to the optimization. */     \
    {0xF0640000,0x0100B0F4, {0x00000003,0x00000004, 0x00000000,0x00000000}}

/*************************************************************************/
/************************** Callback functions ***************************/
/*************************************************************************/

/* Handler for system call exceptions. */
static void sc_handler(PPCState *state)
{
    ASSERT(state);
    state->gpr[3] = 1;
}

/*-----------------------------------------------------------------------*/

/* Handler for timebase register reads.  Returns a value which increments
 * on each TBL or TBU read. */
static uint64_t timebase_handler(PPCState *state)
{
    ASSERT(state);
    return state->tb++;
}

/*-----------------------------------------------------------------------*/

/* Handler for trap exceptions. */
static void trap_handler(PPCState *state)
{
    ASSERT(state);
    state->gpr[3] = 0;
    state->nia += 4;  // Continue with the next instruction.
}

/*************************************************************************/
/************************* Test helper functions *************************/
/*************************************************************************/

/**
 * setup_750cl:  Set up a guest memory region and processor state block
 * for running the PowerPC 750CL test routine.
 *
 * [Parameters]
 *     state: Processor state block to initialize.
 * [Return value]
 *     Newly allocated guest memory region (free with free() when no
 *     longer needed).
 */
static void *setup_750cl(PPCState *state)
{
    uint8_t *memory;
    memory = malloc(PPC750CL_MEMORY_SIZE);
    if (!memory) {
        return NULL;
    }
    memset(memory, 0, PPC750CL_MEMORY_SIZE);
    memcpy(memory + PPC750CL_START_ADDRESS, ppc750cl_bin,
           sizeof(ppc750cl_bin));

    memset(state, 0, sizeof(*state));
    state->timebase_handler = timebase_handler;
    state->sc_handler = sc_handler;
    state->trap_handler = trap_handler;
    state->fres_lut = ppc_fres_lut;
    state->frsqrte_lut = ppc_frsqrte_lut;
    state->gpr[4] = PPC750CL_SCRATCH_ADDRESS;
    state->gpr[5] = PPC750CL_ERROR_LOG_ADDRESS;
    state->fpr[1][0] = 1.0;

    return memory;
}

/*-----------------------------------------------------------------------*/

/**
 * check_750cl_errors:  Check the errors reported from the 750CL test
 * routine against the expected error list, and print any discrepancies
 * to stdout.
 *
 * [Parameters]
 *     count: Return value from the test routine.
 *     memory: Pointer to guest memory region.
 *     expected_errors: Array of expected errors.  Errors are matched by
 *         the first two words of the record; if the same test is listed
 *         multiple times, the first occurrence is used.
 *     expected_length: Length of the expected_errors array.
 * [Return value]
 *     True if only the expected errors were detected, false otherwise.
 */
static bool check_750cl_errors(
    int count, void *memory, const FailureRecord *expected_errors,
    int expected_length)
{
    if (count < 0) {
        printf("Test failed to bootstrap (error %d)\n", count);
        return false;
    }

    bool success = true;
    const uint32_t *error_log =
        (const uint32_t *)((uintptr_t)memory + PPC750CL_ERROR_LOG_ADDRESS);
    bool printed_header = false;

    for (int i = 0; i < count; i++, error_log += 8) {
        const uint32_t insn = bswap_be32(error_log[0]);
        const uint32_t address = bswap_be32(error_log[1]);
        bool pass = false;

        int found_index = -1;
        for (int j = 0; j < expected_length; j++) {
            if (expected_errors[j].insn == insn
             && expected_errors[j].address == address) {
                found_index = j;
                pass = true;
                for (int k = 0; k < 6; k++) {
                    const uint32_t data = bswap_be32(error_log[2+k]);
                    if (data != expected_errors[j].data[k]) {
                        pass = false;
                        break;
                    }
                }
                break;
            }
        }

        if (!pass) {
            success = false;
            if (!printed_header) {
                printf("Unexpected errors detected:\n");
                printed_header = true;
            }
            printf("    %08X %08X  %08X %08X  %08X %08X", insn, address,
                   bswap_be32(error_log[2]), bswap_be32(error_log[3]),
                   bswap_be32(error_log[4]), bswap_be32(error_log[5]));
            if ((insn & 0xFC00003E) == 0xFC000034) {  // frsqrte
                printf("  %08X %08X",
                       bswap_be32(error_log[6]), bswap_be32(error_log[7]));
            }
            printf("\n");
            if (found_index >= 0) {
                printf("        `--> Expected: %08X %08X  %08X %08X",
                       expected_errors[found_index].data[0],
                       expected_errors[found_index].data[1],
                       expected_errors[found_index].data[2],
                       expected_errors[found_index].data[3]);
                if ((insn & 0xFC00003E) == 0xFC000034) {  // frsqrte
                    printf("  %08X %08X",
                           expected_errors[found_index].data[4],
                           expected_errors[found_index].data[5]);
                }
                printf("\n");
            }
        }
    }

    return success;
}

/*************************************************************************/
/*************************************************************************/
